### TODO ###

# Web - first draft w api
  - Research: how to create a restful CRUD database api quickly
  - adapt code to use github pages.
  - For now, just spit out the results on the webpage in a code block
  - create an api for my game that has dummy data to grab
  - award `exp` to characters, and keep adding it, every reload. [as a POC]

# I'd love to add keywords to my TODOs list ie.Research
# clean up code, address TODOs

# Web 2.0 - build team by adding classes and giving names, create enemy groups, fight enemy groups, gain exp, record results

# Make a game out of this???? currency? leveling up? Add dummy players? PRIMARY GAME PLAY LOOP!!

#Engage
   - Add engage mechanic, so if one char attacks anther, the other must then continue to fight that one
	- `engaged` field on person. If attacked, then set this. If set, then use, instead of `chooseTarget`
	- thief should target weakest enemy [ill need to add a weaker knight to test]
		- hmmm classes have an optional `chooseTarget` function, default is random function i already made.

#Manager - a manager decides who their teammates can attack, and who are their teammates, etc. Meant to mimic a leader/captain giving orders
# if i do this, I'll probably delve further into decision tree kinda stuff



## DONE ##

 - Create folder structure [data => (characters), scripts => interactions, scenarios in base folder]
 - Create two characters in data/characters
 - Create a script for two characters fighting in interactions
 - Create a scenario that imports and calls the fight interaction with the two characters
 - Create an interaction script for two teams fighting each other [maybe just randomly hit another random person]
  (rather than all chars randomly hitting each other)
 - Create a scenario to do the two teams (lies! Wasn't complete)
 - get group v group working
 - cleaner implementation of priority for thief
 - Added cancelling when crit within 5 ticks
